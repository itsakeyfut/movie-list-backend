basePath: /api
definitions:
  handlers.createMovieResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.movieResponse'
      status:
        type: string
    type: object
  handlers.errorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.loginResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      token:
        type: string
    type: object
  handlers.movieRequest:
    properties:
      description:
        type: string
      image:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    required:
    - description
    - release_date
    - title
    type: object
  handlers.movieResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  handlers.signupRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  handlers.signupResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: API for movie management application built with DDD principles
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Movie API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.loginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      summary: User login
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up and add new user info
      parameters:
      - description: Signup credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.signupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.signupResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      summary: User signup
      tags:
      - auth
  /movies:
    post:
      consumes:
      - application/json
      description: Add a new movie to the database
      parameters:
      - description: Movie details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.movieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.createMovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.errorResponse'
      security:
      - Bearer: []
      summary: Create a new movie
      tags:
      - movies
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
